set -g  default-terminal 'tmux-256color'
set -g  terminal-overrides ',xterm-256color:RGB'
set -ga terminal-features  ',xterm-ghostty'
set -ga terminal-features  ',xterm-kitty'
# Undercurl for errors in vim etc
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# # https://yazi-rs.github.io/docs/image-preview/#tmux
# set -g allow-passthrough all
# set -ga update-environment TERM
# set -ga update-environment TERM_PROGRAM

# unbind C-Space
# set -g prefix C-Space
# bind C-Space send-prefix        # Send command on double press
set  -g detach-on-destroy off     # don't exit from tmux when closing a session
set  -g history-limit 1000000     # increase history size (from 2,000)
set  -g renumber-windows on       # renumber all windows when any window is closed
set  -g set-clipboard on          # use system clipboard
set  -g status-position top
set  -g pane-active-border-style 'fg=blue,bg=terminal'
set  -g pane-border-style 'fg=brightblack,bg=terminal'
set  -g window-active-style 'bg=terminal'
set  -g window-style 'bg=terminal'
setw -g mode-keys vi
set clock-mode-style 24

## fish
# fzf-session='tmux list-sessions -F "#{session_name}" | fzf | read result && tmux switch-client -t "$result"'
# fzf-tabs='tmux list-windows -F "#{session_name}:#{window_name}:#{window_id}" | fzf | sed -E "s/(.*):.*:(.*)/\1:\2/g" | xargs tmux switch -t'
# fzf-all-tabs='tmux list-windows -a -F "#{session_name}:#{window_name}:#{window_id}" | fzf | sed -E "s/(.*):.*:(.*)/\1:\2/g" | xargs tmux switch -t'
# fzf_search_keys='tmux send-keys -t #{pane_id} \"$(tmux list-keys | fzf +m | paste -s)\"'
## nushell
fzf_session='tmux list-sessions -F "#{session_name}" | fzf --no-multi | parse `{session_name}` | tmux switch-client -t $"($in.session_name?.0)"'
fzf_tabs='tmux list-windows -F "#{session_name}:#{window_name}:#{window_id}" | fzf --no-multi | parse `{session_name}:{win_name}:{win_id}` | $"($in | get session_name.0):($in | get win_name.0)" | tmux switch -t $in'
fzf_all_tabs='tmux list-windows -a -F "#{session_name}:#{window_name}:#{window_id}" | fzf --no-multi | parse `{session_name}:{win_name}:{win_id}` | $"($in | get session_name.0):($in | get win_name.0)"| tmux switch -t $in'
fzf_search_keys='tmux list-keys | fzf --bind "enter:execute-silent(^echo -n {} | cb )+accept"'

# Copy-mode
unbind -T copy-mode-vi 'v'
bind   -T copy-mode-vi 'v'                 send-keys -X begin-selection
bind   -T copy-mode-vi 'C-v'               send-keys -X rectangle-toggle
bind   -T copy-mode-vi 'C-a'               send-keys -X start-of-line
bind   -T copy-mode-vi 'C-e'               send-keys -X end-of-line
bind   -T copy-mode-vi 'y'                 send-keys -X copy-pipe-and-cancel "wl-copy"
bind   -T copy-mode-vi 'C-y'               send-keys -X copy-selection-and-cancel bufferiex
bind   -T copy-mode-vi 'MouseDragEnd1Pane' send-keys -X copy-pipe-and-cancel "wl-copy"
bind   -T copy-mode-vi 'C-j'               send-keys -X scroll-down
bind   -T copy-mode-vi 'C-k'               send-keys -X scroll-up
# Swap the default behavior of '/' and '?'
bind   -T copy-mode-vi '/'                 command-prompt -T search -p "(search up)"   { send-keys -X search-backward "%%" }
bind   -T copy-mode-vi '?'                 command-prompt -T search -p "(search down)" { send-keys -X search-forward "%%" }



# Reload tmux.conf on prefix r
# bind r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded!"
bind 'R' source-file '~/.config/tmux/tmux.conf' > /dev/null\; display-message 'Sourced tmux config!'

# Creating new window (i.e. tab)
bind 'c' new-window

bind 'B' new-window -n 'btm' 'btm'
bind 'G' new-window -n 'lazygit' -c "#{pane_current_path}" lazygit

# Prefix+s shows session list by default, but is shadowed by my split screen
# biding, so use a instead
bind 'a' choose-tree -s

bind 'h'   select-pane -L
bind 'j'   select-pane -D
bind 'k'   select-pane -U
bind 'l'   select-pane -R
bind 'C-h' select-pane -L
bind 'C-j' select-pane -D
bind 'C-k' select-pane -U
bind 'C-l' select-pane -R

bind 'v' copy-mode
bind 'V' copy-mode

bind ']' next-window
bind '[' previous-window
bind '}' swap-window -d -t +1
bind '{' swap-window -d -t -1

# Toggle status bar
bind -r 'T' set-option -g status
bind -r 'S' set-option -g status

unbind 'u'
bind   'u' switch-client -T tableUiToggles
# Toggle status bar
bind -T tableUiToggles 'S' set-option -g status

unbind 'g'
bind   'g' switch-client -T tableGit
bind -T tableGit 'g' new-window -n  "lazygit"   -c "#{pane_current_path}" "lazygit"
bind -T tableGit 'b' new-window -n  "lg-branch" -c "#{pane_current_path}" "lazygit branch"
bind -T tableGit 'l' new-window -n  "lg-log"    -c "#{pane_current_path}" "lazygit log"
bind -T tableGit 's' new-window -n  "lg-status" -c "#{pane_current_path}" "lazygit status"
bind -T tableGit 't' new-window -n  "lg-stash"  -c "#{pane_current_path}" "lazygit stash"

unbind '/'
bind   '/' switch-client -T tableSearch
bind -T tableSearch 'h' new-window -n 'man tmux' 'man tmux'
bind -T tableSearch 'k' run "tmux split-window -p 40 '${fzf_search_keys}'"
bind -T tableSearch 'K' command-prompt -k -p key { list-keys -1N "%%" }

unbind 'S'
bind   'S' switch-client -T tableServer
bind -T tableServer 'C-k'    kill-server

unbind 's'
bind   's' switch-client -T tableSession
bind -T tableSession 'd'     detach-client
bind -T tableSession 'n'     command-prompt -p "New session:" "new-session -A -s '%%'"
bind -T tableSession 'r'     command-prompt -p "Rename session:" "rename-session '%%'"
bind -T tableSession 's'     display-popup -E "${fzf_session}"
bind -T tableSession 'Space' display-popup -E "${fzf_session}"
bind -T tableSession 't'     display-popup -E "${fzf_all_tabs}"
# Toggle between sessions
bind -T tableSession 'o'  switch-client -l
bind -T tableSession 'i'  switch-client -l

unbind 't'
bind   't'  switch-client -T tableTab
bind  'TAB' switch-client -T tableTab
bind -T tableTab  ']'  next-window
bind -T tableTab  '['  previous-window
bind -T tableTab  '}'  swap-window -d -t +1
bind -T tableTab  '{'  swap-window -d -t -1
bind -T tableTab  'l'  next-window
bind -T tableTab  'h'  previous-window
bind -T tableTab  'c'  new-window
bind -T tableTab  'n'  command-prompt -p "New window:" "new-window -n '%%'"
bind -T tableTab  ':'  command-prompt -p "Command:" "new-window -n '%1' '%1'"
bind -T tableTab  'b'  new-window -n 'btm' 'btm'
# Toggle between sessions
bind -T tableTab  'o'  select-window -l
bind -T tableTab  'i'  select-window -l
bind -T tableTab  't'  display-popup -E "${fzf_tabs}"
bind -T tableTab 'Tab' display-popup -E "${fzf_tabs}"
bind -T tableTab  'r'  command-prompt -I "#W" { rename-window "%%" }
bind -T tableTab  's'  display-popup -E "${fzf_all_tabs}"

# '-n' is the same as '-T root', i.e. no prefix bindings
# 'M-' is alt key (meta)
# "right-click" menus for panes
bind -n 'M-,'  display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer "#{q:mouse_hyperlink}" } '' "Horizontal Split" h { split-window -h } "Vertical Split" v { split-window -v } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }
# "right-click" menus for tabs
bind -n 'M-.'  display-menu -T "#[align=centre]#{window_index}:#{window_name}" -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l { swap-window -t :-1 } "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } "#{?pane_marked_set,,-}Swap Marked" s { swap-window } '' Kill X { kill-window } Respawn R { respawn-window -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } '' "New After" w { new-window -a } "New At End" W { new-window }
# Sessions->panes tree
bind -n 'M-a'  choose-tree -s


# fzf sessions
bind -n 'M-s'  display-popup -E "${fzf_session}"
# fzf tabs
bind -n 'M-t'  display-popup -E "${fzf_tabs}"
# fzf all tabs in all sessions
bind -n 'M-T'   display-popup -E "${fzf_all_tabs}"

bind -n 'M-1'  select-window -t :=1
bind -n 'M-2'  select-window -t :=2
bind -n 'M-3'  select-window -t :=3
bind -n 'M-4'  select-window -t :=4
bind -n 'M-5'  select-window -t :=5
bind -n 'M-6'  select-window -t :=6
bind -n 'M-7'  select-window -t :=7
bind -n 'M-8'  select-window -t :=8
bind -n 'M-9'  select-window -t :=9
bind -n 'C-Tab'   next-window
bind -n 'C-BTab' previous-window
#         Ôê±   aka ctrl+shift+tab
bind -n 'M-]'  next-window
bind -n 'M-['  previous-window
bind -n 'M-}'  swap-window -d -t +1
bind -n 'M-{'  swap-window -d -t -1
bind -n 'M-o'  select-window -l
bind -n 'M-i'  select-window -l
bind -n 'M-O'  switch-client -l
bind -n 'M-I'  switch-client -l
bind -n 'M-:'  command-prompt
bind -n 'M-C'  clock-mode

# bind -n 'M-h' select-pane -L
# bind -n 'M-j' select-pane -D
# bind -n 'M-k' select-pane -U
# bind -n 'M-l' select-pane -R
bind -n 'M-z' resize-pane -Z
bind -n 'M-v' 'copy-mode; send-keys 0;'
bind -n 'M-n' split-window -h -c '#{pane_current_path}'
bind -n 'M--' split-window -v -c '#{pane_current_path}'
# bind -n 'M-b' split-window -v -c '#{pane_current_path}'
# Break pane into new window
bind -n 'M-B' break-pane

unbind 'w'
bind   'w' switch-client -T tableWin
bind -T tableWin 'h'   select-pane -L
bind -T tableWin 'j'   select-pane -D
bind -T tableWin 'k'   select-pane -U
bind -T tableWin 'l'   select-pane -R
bind -T tableWin 'z'   resize-pane -Z
bind -T tableWin 'v'   split-window -h -c '#{pane_current_path}'
bind -T tableWin 's'   split-window -v -c '#{pane_current_path}'
bind -T tableWin 'n'   split-window -v -c '#{pane_current_path}'
bind           'Enter' split-window -h -c '#{pane_current_path}'
# Break pane into new window
bind -T tableWin 'b' break-pane
# Break pane into new window and keep focus on the current window
bind -T tableWin 'B' break-pane -d


# Do not copy or clear the selection or exit copy mode when the mouse is released. The keyboard must be used to copy the selection:
unbind -Tcopy-mode MouseDragEnd1Pane

### vim-tmux-navigator
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
# https://github.com/christoomey/vim-tmux-navigator?tab=readme-ov-file#disable-wrapping
bind-key -n 'M-h' if-shell "$is_vim" { send-keys M-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'M-j' if-shell "$is_vim" { send-keys M-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'M-k' if-shell "$is_vim" { send-keys M-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'M-l' if-shell "$is_vim" { send-keys M-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }


# https://saveman71.com/2023/making-iex-react-to-d-and-l-quit-and-clear-with-tmux-bindings
# enter copy-mode -> copy current entry (skipping the prompt) to special buffer with C-y (bound above),
# typing in the iex clear/0 function, then pasting in the line that was copied.
# NOTE: The copy/paste hack currently needs no spaces in the prompt, so double check the custom prompt in .iex.exs .
# Should work with the default iex prompt
# C-l seems to work in later versions of Elixir now!
# bind -n C-l if -F "#{m:*iex*,#{pane_title}}" 'copy-mode; send-keys 0; send-keys E; send-keys l; send-keys l; send-keys v; send-keys $; send-keys C-y; send-keys C-u; send-keys clear\n; paste-buffer -d -s ""' "send-keys C-l"
# <C-d> doesn't do anything in iex like in most other shells, but this break comment helps terminate
# multiline statements
bind -n C-d if -F "#{m:*iex*,#{pane_title}}" 'send-keys "#iex:break"' "send-keys C-d"

### Status Bar
bg='#7aa2f7'
indicator='  ‚Øé   '
window_status_format=' #{window_index}¬∑#{window_name} '
status_right='#{session_name} Ó¨Å #(date --utc +"%%Y-%%m-%%d %%H:%%M")'
status_left="#[bg=terminal,fg=terminal,bold]#{?client_prefix,,${indicator}}#[bg=${bg},fg=black,bold]#{?client_prefix,${indicator},}#[bg=terminal,fg=terminal,bold]"
expanded_icon='ÓÆÅ '

set -g status-position              'top'
set -g status-style                 'bg=terminal,fg=terminal'
set -g status-justify               'left'
set -g status-left                  "${status_left}"
set -g status-right                 '#[fg=#7aa2f7]ÓÇ∂#[fg=#000000,bg=#7aa2f7]#{session_name}#[fg=#7aa2f7,bg=terminal]ÓÇ¥#[fg=terminal,bg=terminal] Ó¨Å #(date --utc +"%%Y-%%m-%%d %%H:%%M")'
set -g window-status-format         "${window_status_format}"
set -g window-status-current-format "#[bg=${bg},fg=#000000] ${window_status_format}#{?window_zoomed_flag,${expanded_icon}, }"
set -g window-status-format         " ${window_status_format}#{?window_zoomed_flag,${expanded_icon}, }"

############################
# TokyoNight colors
# [colors]
# foreground = "#c0caf5"
# background = "#1a1b26"
# cursor_bg = "#c0caf5"
# cursor_border = "#c0caf5"
# cursor_fg = "#1a1b26"
# selection_bg = "#283457"
# selection_fg = "#c0caf5"
# split = "#7aa2f7"
# compose_cursor = "#ff9e64"
# scrollbar_thumb = "#292e42"
# ansi = ["#15161e", "#f7768e", "#9ece6a", "#e0af68", "#7aa2f7", "#bb9af7", "#7dcfff", "#a9b1d6"]
# brights = ["#414868", "#f7768e", "#9ece6a", "#e0af68", "#7aa2f7", "#bb9af7", "#7dcfff", "#c0caf5"]
